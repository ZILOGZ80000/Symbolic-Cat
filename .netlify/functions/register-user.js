// functions/register-user.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// –ü–∞—Ä—Å–∏–º –∫—É–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
const parseCookies = (headers) => {
  return headers.cookie?.split(';').reduce((acc, cookie) => {
    const [key, value] = cookie.trim().split('=');
    acc[key] = value;
    return acc;
  }, {}) || {};
};

exports.handler = async (event) => {
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': 'https://your-site.netlify.app', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω
    'Access-Control-Allow-Credentials': 'true'
  };

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF-—Ç–æ–∫–µ–Ω
    const csrfToken = event.headers['x-csrf-token'];
    const cookies = parseCookies(event.headers);
    
    if (csrfToken !== cookies.csrf_token) {
      return {
        statusCode: 403,
        headers,
        body: JSON.stringify({ error: 'CSRF-—Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω üö®' })
      };
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–µ-POST
    if (event.httpMethod !== 'POST') {
      return {
        statusCode: 405,
        headers,
        body: JSON.stringify({ error: '—Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π –∏–¥–∏ –Ω–∞—Ö' })
      };
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    const { username, password, email } = JSON.parse(event.body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!username || !password) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' })
      };
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(password, 10);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
    const authToken = jwt.sign(
      { username },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        const DB_URL = process.env.DB_URL;
        const DB_KEY = process.env.DB_KEY;

        if (!DB_URL || !DB_KEY) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                    error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                    message: '–°–µ—Ä–≤–µ—Ä —Å–ª–æ–º–∞–ª—Å—è –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ :(' 
                })
            };
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
        const getResponse = await fetch(`${DB_URL}/users`, {
            method: 'GET',
            headers: { 'token': DB_KEY }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!getResponse.ok) {
            return {
                statusCode: 502,
                headers,
                body: JSON.stringify({
                    error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                    message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ'
                })
            };
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersDB = await getResponse.json();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (usersDB[username]) {
            return {
                statusCode: 409,
                headers,
                body: JSON.stringify({
                    error: '–ò–º—è –∑–∞–Ω—è—Ç–æ',
                    message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                })
            };
        } 
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usersDB[username] = {
            email: email || null,
            password: passwordHash, 
            created: new Date().toISOString(),
            fish :0,
            level:0,
            type: "user",
            icon: "awatar.json",
            clan: null,
            shops: {},
            fridens: {},
            achievements: [],
            inactive_promocodes: []
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const updateResponse = await fetch(`${DB_URL}/users`, {
            method: 'POST',
            headers: {
                'token': DB_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(usersDB)
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (!updateResponse.ok) {
            return {
                statusCode: 502,
                headers,
                body: JSON.stringify({
                    error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ :('
                })
            };
        }


    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∞—Ö
    headers['Set-Cookie'] = `auth=${authToken}; Path=/; SameSite=Strict; HttpOnly; Secure; Max-Age=3600`;

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        message: `–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! :3`,
        username
      })
    };

  } catch (error) {
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        errror: error,
        message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ;-;'
      })
    };
  }
};
