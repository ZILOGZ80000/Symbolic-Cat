// functions/register-user.js
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');

// –ü–∞—Ä—Å–∏–º –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
const parseCookies = (headers) => {
  return headers.cookie?.split(';').reduce((acc, cookie) => {
    const [key, value] = cookie.trim().split('=');
    acc[key] = decodeURIComponent(value);
    return acc;
  }, {}) || {};
};

exports.handler = async (event) => {
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': 'https://symbolic-cat.netlify.app',
    'Access-Control-Allow-Credentials': 'true'
  };

  try {
    // ======= 1. CSRF-–ø—Ä–æ–≤–µ—Ä–∫–∞ =======
    const csrfToken = event.headers['x-csrf-token'];
    const cookies = parseCookies(event.headers);
    
    if (!csrfToken || csrfToken !== cookies.csrf_token) {
      return {
        statusCode: 403,
        headers,
        body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CSRF' })
      };
    }

    // ======= 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ =======
    if (event.httpMethod !== 'POST') {
      return {
        statusCode: 405,
        headers,
        body: JSON.stringify({ error: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã' })
      };
    }

    // ======= 3. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö =======
    const { username, password, email } = JSON.parse(event.body);
    
    // ======= 4. –í–∞–ª–∏–¥–∞—Ü–∏—è =======
    if (!username || !password) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' })
      };
    }

    // ======= 5. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è =======
    const passwordHash = await bcrypt.hash(password, 10);

    // ======= 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =======
    if (!process.env.DB_URL || !process.env.DB_KEY) {
      throw new Error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }

    // ======= 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =======
    const getResponse = await fetch(`${process.env.DB_URL}/users`, {
      method: 'GET',
      headers: { 'token': process.env.DB_KEY }
    });
    
    if (!getResponse.ok) {
      return {
        statusCode: 502,
        headers,
        body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ' })
      };
    }

    const usersDB = await getResponse.json();

    // ======= 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
    if (usersDB[username]) {
      return {
        statusCode: 409,
        headers,
        body: JSON.stringify({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' })
      };
    }

    // ======= 9. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =======
    usersDB[username] = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      email: email || null,
      password: passwordHash,
      created: new Date().toISOString(),
      
      // –ò–≥—Ä–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      fish: 0,
      level: 0,
      type: "user",
      icon: "awatar.json",
      clan: null,
      
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      shops: {},         // –ü—Ä–∏–º–µ—Ä: { "shop1": true, "shop2": false }
      friends: {},       // –ü—Ä–∏–º–µ—Ä: { "user2": "pending", "user3": "accepted" }
      achievements: [],  // –ü—Ä–∏–º–µ—Ä: ["first_win", "collector"]
      inactive_promocodes: [], // –ü—Ä–∏–º–µ—Ä: ["SUMMER2024", "WINTERSALE"]
      
      // –°–µ—Å—Å–∏–∏
      sessions: []
    };

    // ======= 10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ =======
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() + 3600 * 1000); // 1 —á–∞—Å
    
    usersDB[username].sessions.push({
      id: sessionId,
      expires: expiresAt.toISOString(),
      created: new Date().toISOString()
    });

    // ======= 11. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É =======
    const updateResponse = await fetch(`${process.env.DB_URL}/users`, {
      method: 'POST',
      headers: {
        'token': process.env.DB_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(usersDB)
    });

    if (!updateResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }

    // ======= 12. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫ =======
    const cookieOptions = [
      `Path=/`,
      `Secure`,
      `SameSite=Strict`,
      `HttpOnly`,
      `Max-Age=3600`
    ].join('; ');

    headers['Set-Cookie'] = [
      `session=${sessionId}; ${cookieOptions}`,
      `username=${encodeURIComponent(username)}; ${cookieOptions.replace('HttpOnly', '')}`
    ].join(', ');

    // ======= 13. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç =======
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üò∫',
        username,
        fish: 0,
        level: 0
      })
    };

  } catch (error) {
    // ======= 14. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ =======
    console.error('–û—à–∏–±–∫–∞:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
        details: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      })
    };
  }
};
