const crypto = require('crypto');

exports.handler = async (event) => {
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
    };

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
        if (event.httpMethod !== 'POST') {
            return {
                statusCode: 405,
                headers,
                body: JSON.stringify({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Ç–æ–¥ —á–∏—Ç–∞–∫ —Ç—É–ø–æ–π' })
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ AUTH_KEY
        const authToken = event.headers['auth'];
        const AUTH_KEY = process.env.AUTH_KEY;
        
        if (authToken !== `Basic ${AUTH_KEY}`) {
            return {
                statusCode: 401,
                headers,
                body: JSON.stringify({
                    error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
                    message: 'üñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñïüñï'
                })
            };
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        const data = JSON.parse(event.body);
        const username = data.username?.trim();
        const email = data.email?.trim();
        const password = data.password;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!username || !password) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ 
                    error: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                    message: '–ò–º—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!'
                })
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏
        if (/[:;=@\s]/.test(username)) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ 
                    error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è',
                    message: '–¢–≤–æ—ë –∏–º—è –ø–æ—Ö–æ–∂–µ –Ω–∞.. —Ö–º... –∏–Ω—ä–µ–∫—Ü–∏—é?'
                })
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        const DB_URL = process.env.DB_URL;
        const DB_KEY = process.env.DB_KEY;

        if (!DB_URL || !DB_KEY) {
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                    error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                    message: '–°–µ—Ä–≤–µ—Ä —Å–ª–æ–º–∞–ª—Å—è –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ :)' 
                })
            };
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
        const getResponse = await fetch(`${DB_URL}/users`, {
            method: 'GET',
            headers: { 'token': DB_KEY }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!getResponse.ok) {
            return {
                statusCode: 502,
                headers,
                body: JSON.stringify({
                    error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                    message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ'
                })
            };
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersDB = await getResponse.json();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (usersDB[username]) {
            return {
                statusCode: 409,
                headers,
                body: JSON.stringify({
                    error: '–ò–º—è –∑–∞–Ω—è—Ç–æ',
                    message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
                })
            };
        }

        // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const salt = crypto.randomBytes(16).toString('hex');
        const passwordHash = crypto.createHash('sha256')
            .update(password + salt)
            .digest('hex');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usersDB[username] = {
            email: email || '',
            password: salt + '.' + passwordHash, 
            createdAt: new Date().toISOString(),
            lastLogin: null,
            settings: {}
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const updateResponse = await fetch(`${DB_URL}/users`, {
            method: 'POST',
            headers: {
                'token': DB_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(usersDB)
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (!updateResponse.ok) {
            return {
                statusCode: 502,
                headers,
                body: JSON.stringify({
                    error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ '
                })
            };
        }

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
                success: true,
                message: `–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`,
                user: {
                    username,
                    email
                }
            })
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({
                error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
                ...(process.env.NODE_ENV === 'development' && { debug: error.message })
            })
        };
    }
};
